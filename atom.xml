<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://michael.mior.ca/</id>
  <title>Michael Mior</title>
  <updated>2015-09-24T00:00:00Z</updated>
  <link rel="alternate" href="http://michael.mior.ca/"/>
  <link rel="self" href="http://michael.mior.ca/atom.xml"/>
  <author>
    <name>Michael Mior</name>
    <uri>http://michael.mior.ca</uri>
  </author>
  <entry>
    <id>tag:michael.mior.ca,2015-09-24:/2015/09/24/blog/automated-testing-of-dotfiles.html</id>
    <title type="html">Automated Testing of Dotfiles</title>
    <published>2015-09-24T00:00:00Z</published>
    <updated>2015-09-24T00:00:00Z</updated>
    <link rel="alternate" href="http://michael.mior.ca/2015/09/24/blog/automated-testing-of-dotfiles.html"/>
    <content type="html">&lt;p&gt;Several years ago I started managing my dotfiles based on Zach Holman’s &lt;a href="https://github.com/holman/dotfiles"&gt;dotfiles repo&lt;/a&gt;.
His setup is quite nice and I found it relatively easy to adapt to my own&amp;nbsp;purposes.
My workflow generally consisted of making a bunch of local changes until I was happy and then pushing to my own &lt;a href="https://github.com/michaelmior/dotfiles"&gt;GitHub fork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The big problem I eventually found is that I wasn’t fully capturing the correct steps to reproduce my&amp;nbsp;environment.
Every time that I tried to install my dotfiles on a new machine, I would be met with several errors that I would eventually&amp;nbsp;resolve.
The fix would not always result in something which was reproducible on another&amp;nbsp;machine.
I wanted a solution that would let me automatically test that my dotfiles would cleanly install every time I pushed to GitHub, so I turned to &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Traditional &lt;span class="caps"&gt;CI&lt;/span&gt; services would have been a bit of a pain to use with all the packages that needed to be&amp;nbsp;installed.
&lt;a href="https://hub.docker.com/r/michaelmior/dotfiles/"&gt;Docker Hub&lt;/a&gt; made things nice and&amp;nbsp;easy.
My &lt;a href="https://github.com/michaelmior/dotfiles/blob/a9eae90d466958948a53b3b583d69eba844ed8f7/Dockerfile"&gt;Dockerfile&lt;/a&gt; simply installs the necessary &lt;span class="caps"&gt;OS&lt;/span&gt; packages, adds a new user and then tries to run my install&amp;nbsp;script.
I currently don’t have any other testing other than to ensure that the script exits without error, but this has already saved me a lot of&amp;nbsp;trouble.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:michael.mior.ca,2014-08-21:/2014/08/21/blog/cassandra-benchmarking.html</id>
    <title type="html">Cassandra benchmarking</title>
    <published>2014-08-21T00:00:00Z</published>
    <updated>2014-08-21T00:00:00Z</updated>
    <link rel="alternate" href="http://michael.mior.ca/2014/08/21/blog/cassandra-benchmarking.html"/>
    <content type="html">&lt;p&gt;I was recently trying to run some benchmarks against &lt;a href="http://cassandra.apache.org/"&gt;Cassandra&lt;/a&gt; on &lt;a href="http://aws.amazon.com/ec2/"&gt;&lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/a&gt; since unfortunately the servers I had in our machine room were destroyed in a&amp;nbsp;fire.
For all my local testing, I used a single instance running on my desktop machine, but I wanted to ramp things up for the real benchmarks and use three&amp;nbsp;nodes.
Since my workload is read-only and the dataset is fairly small, I also wanted a replication factor of three so each node would have a copy of all the&amp;nbsp;data.&lt;/p&gt;

&lt;p&gt;My first attempt to load all this data was to follow &lt;a href="http://www.datastax.com/documentation/cql/3.0/cql/cql_using/update_ks_rf_t.html"&gt;some documentation&lt;/a&gt; provided by&amp;nbsp;DataStax.
Their suggestion was to use &lt;code&gt;ALTER KEYSPACE&lt;/code&gt; in &lt;span class="caps"&gt;CQL&lt;/span&gt; to change the replication factor, and then simply run &lt;code&gt;nodetool repair&lt;/code&gt; on each&amp;nbsp;node.
However, I found that running repair on just one node took several hours for a modest-sized amount of data&amp;nbsp;(~&lt;span class="caps"&gt;2GB&lt;/span&gt;).
This was a pretty big time sink as I wanted to able to quickly spin up and down a cluster for&amp;nbsp;testing.&lt;/p&gt;

&lt;p&gt;Next I tried changing the configured replication factor locally before exporting the&amp;nbsp;data.
I then simply copied the data to all nodes in the cluster and tried to start them as&amp;nbsp;normal.
This created some weird conflicts as nodes seemed to be confused about who owned what portion of&amp;nbsp;data.&lt;/p&gt;

&lt;p&gt;Finally, I simply loaded up the data set on a single node and configured a replication factor of&amp;nbsp;three.
I then started each node in sequence and the auto bootstrapping process took care of copying the entire dataset to each node in the&amp;nbsp;cluster.
This whole process was complete in less than half an&amp;nbsp;hour.
This approach wouldn’t really work in a production setting since it assumes the node has no existing data (although if you can afford to bring a node offline for a while, I suppose that it might&amp;nbsp;work).
In any case, this solution worked great for me and hopefully someone else finds this&amp;nbsp;useful.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:michael.mior.ca,2012-09-15:/2012/09/15/blog/node-js-skeleton-project.html</id>
    <title type="html">Node.js skeleton project</title>
    <published>2012-09-15T00:00:00Z</published>
    <updated>2012-09-15T00:00:00Z</updated>
    <link rel="alternate" href="http://michael.mior.ca/2012/09/15/blog/node-js-skeleton-project.html"/>
    <content type="html">&lt;p&gt;Unfortunately, it’s obviously been a long time since this blog has been&amp;nbsp;updated.
Since the last post, I’ve been hard at work rewriting our Web app in Django (finally got rid of our old &lt;span class="caps"&gt;PHP&lt;/span&gt;) and picking up iPhone app&amp;nbsp;development.
Keep an eye out for some cool stuff coming up in the near&amp;nbsp;future.&lt;/p&gt;

&lt;p&gt;In my spare time, I’ve been playing around with Node.js&amp;nbsp;development.
I decided to release the sample project I’ve been working&amp;nbsp;on.
You may find it useful if you’re looking to get up and running&amp;nbsp;quickly.
It’s still a work in progress, but it’s coming along&amp;nbsp;nicely.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://github.com/michaelmior/node-loco-skeleton"&gt;node-loco-skeleton&lt;/a&gt; on&amp;nbsp;GitHub.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:michael.mior.ca,2012-01-14:/2012/01/14/blog/unit-testing-django-model-mixins.html</id>
    <title type="html">Unit testing Django model mixins</title>
    <published>2012-01-14T00:00:00Z</published>
    <updated>2012-01-14T00:00:00Z</updated>
    <link rel="alternate" href="http://michael.mior.ca/2012/01/14/blog/unit-testing-django-model-mixins.html"/>
    <content type="html">&lt;p&gt;I recently found myself having to unit test some model mixins and I thought I would share the technique I used in case anyone else finds it&amp;nbsp;useful.
You could just pick a model which uses the mixin and run the test on instances of that&amp;nbsp;model.
But the goal of a mixin is to provide reusable functionality independent of any&amp;nbsp;model.
Instead, we create a dummy model we can use for&amp;nbsp;testing.&lt;/p&gt;

&lt;p&gt;The model shouldn’t reside in &lt;code&gt;models.py&lt;/code&gt; since we don’t want it in our&amp;nbsp;database.
Instead, we create the model&amp;nbsp;dynamically.
However, I wanted to test some functionality which requires saving the model to the&amp;nbsp;database.
Fortunately, Django can construct the necessary &lt;span class="caps"&gt;SQL&lt;/span&gt; to create and destroy the database&amp;nbsp;table.
we simply override setUp and tearDown to do the heavy&amp;nbsp;lifting.&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt; &lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;from&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;django.test&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;import&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;TestCase&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;from&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;django.db&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;import&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;connection&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;from&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;django.core.management.color&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;import&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;no_style&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;from&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;django.db.models.base&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;import&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;ModelBase&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;ModelMixinTestCase&lt;/span&gt;(TestCase):
&lt;span class="line-numbers"&gt; &lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#D42"&gt;&lt;span style="color:black"&gt;"""&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#D42"&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;    Base class for tests of model mixins. To use, subclass and specify&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#D42"&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;    the mixin class variable. A model using the mixin will be made&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#D42"&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;    available in self.model.&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n11" name="n11"&gt;11&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#D42"&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style="color:black"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n12" name="n12"&gt;12&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n13" name="n13"&gt;13&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;def&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;setUp&lt;/span&gt;(&lt;span style="color:#069"&gt;self&lt;/span&gt;):
&lt;span class="line-numbers"&gt;&lt;a href="#n14" name="n14"&gt;14&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#777"&gt;# Create a dummy model which extends the mixin&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n15" name="n15"&gt;15&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#069"&gt;self&lt;/span&gt;.model = ModelBase(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;span style="color:#D20"&gt;__TestModel__&lt;/span&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;/span&gt;+&lt;span style="color:#069"&gt;self&lt;/span&gt;.mixin.__name__, (&lt;span style="color:#069"&gt;self&lt;/span&gt;.mixin,),
&lt;span class="line-numbers"&gt;&lt;a href="#n16" name="n16"&gt;16&lt;/a&gt;&lt;/span&gt;            { &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;span style="color:#D20"&gt;__module__&lt;/span&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style="color:#069"&gt;self&lt;/span&gt;.mixin.__module__ })
&lt;span class="line-numbers"&gt;&lt;a href="#n17" name="n17"&gt;17&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n18" name="n18"&gt;18&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#777"&gt;# Create the schema for our test model&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n19" name="n19"&gt;19&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#069"&gt;self&lt;/span&gt;._style = no_style()
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n20" name="n20"&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        sql, _ = connection.creation.sql_create_model(&lt;span style="color:#069"&gt;self&lt;/span&gt;.model, &lt;span style="color:#069"&gt;self&lt;/span&gt;._style)
&lt;span class="line-numbers"&gt;&lt;a href="#n21" name="n21"&gt;21&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n22" name="n22"&gt;22&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#069"&gt;self&lt;/span&gt;._cursor = connection.cursor()
&lt;span class="line-numbers"&gt;&lt;a href="#n23" name="n23"&gt;23&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; statement &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; sql:
&lt;span class="line-numbers"&gt;&lt;a href="#n24" name="n24"&gt;24&lt;/a&gt;&lt;/span&gt;            &lt;span style="color:#069"&gt;self&lt;/span&gt;._cursor.execute(statement)
&lt;span class="line-numbers"&gt;&lt;a href="#n25" name="n25"&gt;25&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n26" name="n26"&gt;26&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;def&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;tearDown&lt;/span&gt;(&lt;span style="color:#069"&gt;self&lt;/span&gt;):
&lt;span class="line-numbers"&gt;&lt;a href="#n27" name="n27"&gt;27&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#777"&gt;# Delete the schema for the test model&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n28" name="n28"&gt;28&lt;/a&gt;&lt;/span&gt;        sql = connection.creation.sql_destroy_model(&lt;span style="color:#069"&gt;self&lt;/span&gt;.model, (), &lt;span style="color:#069"&gt;self&lt;/span&gt;._style)
&lt;span class="line-numbers"&gt;&lt;a href="#n29" name="n29"&gt;29&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; statement &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; sql:
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n30" name="n30"&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;            &lt;span style="color:#069"&gt;self&lt;/span&gt;._cursor.execute(statement)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To make use of this code, just subclass from &lt;code&gt;ModelMixinTestCase&lt;/code&gt; and set the mixin class variable to the model mixin class you wish to&amp;nbsp;test.
You’ll then have access to a fully functioning model which uses this mixin via&amp;nbsp;&lt;code&gt;self.model&lt;/code&gt;.
Happy&amp;nbsp;testing!&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:michael.mior.ca,2012-01-06:/2012/01/06/blog/mysql-client-configuration.html</id>
    <title type="html">MySQL Client Configuration</title>
    <published>2012-01-06T00:00:00Z</published>
    <updated>2012-01-06T00:00:00Z</updated>
    <link rel="alternate" href="http://michael.mior.ca/2012/01/06/blog/mysql-client-configuration.html"/>
    <content type="html">&lt;p&gt;Perhaps I’m the only one who didn’t know this, but a while back, I discovered a handy trick for configuring the My&lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;client.
You can create a configuration file in your home directory, &lt;code&gt;~/.my.cnf&lt;/code&gt; and set options for the My&lt;span class="caps"&gt;SQL&lt;/span&gt; client to&amp;nbsp;use.
Really handy if you’re constantly connecting to the same server and tired of entering hostname and port&amp;nbsp;parameters.&lt;/p&gt;

&lt;p&gt;Here’s an&amp;nbsp;example:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;[client]
&lt;span class="line-numbers"&gt;&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;host     = 127.0.0.1
&lt;span class="line-numbers"&gt;&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;user     = root
&lt;span class="line-numbers"&gt;&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;password = root
&lt;span class="line-numbers"&gt;&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;port     = 4040
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s it for this&amp;nbsp;post.
If you know any other time-saving tips for My&lt;span class="caps"&gt;SQL&lt;/span&gt;, please share in the&amp;nbsp;comments!&lt;/p&gt;</content>
  </entry>
</feed>
